/**
 * @file objective3dconfig.h
 * @brief Defines the compilation options
 * @author Frederic SCHERMA (frederic.scherma@dreamoverflow.org)
 * @date 2008-11-17
 * @copyright Copyright (C) 2001-2017 Dream Overflow. All rights reserved.
 * @details
 */

#ifndef _O3D_CONFIG_H
#define _O3D_CONFIG_H

#define O3D_VERSION @O3D_VERSION@  //! Complete version
#define O3D_VERSION_MAJOR @O3D_VERSION_MAJOR@  //! Major version
#define O3D_VERSION_MINOR @O3D_VERSION_MINOR@  //! Minor version
#define O3D_VERSION_BETA @O3D_VERSION_BETA@    //! Beta is 1

//! minimum O3D files version for reading
#define O3D_VERSION_FILE_MIN @O3D_VERSION_FILE_MIN@

//! SSE2 optimizations
#cmakedefine O3D_USE_SSE2

//! SDL2 suport
#cmakedefine O3D_USE_SDL2

//! EGL suport
#cmakedefine O3D_USE_EGL

//! WAYLAND suport
#cmakedefine O3D_USE_WAYLAND

//! VULKAN support
#cmakedefine O3D_USE_VULKAN

//! OpenGL debugging extension support
#cmakedefine01 O3D_GL_DEBUG

//! Export type (dll,lib)
//! DLL export is default setting
//! Use one of the following in your makefile or project settings
//! O3D_EXPORT_DLL is set in the VC project Debug and Release mode. And O3D_STATIC_LIB is set
//! in the VC project in DebugStatic mode, and with the Makefile.
//! If none is defined O3D_IMPORT_DLL is set.
//#define O3D_EXPORT_DLL
//#define O3D_IMPORT_DLL
//#define O3D_STATIC_LIB

//
// Android
//
#if defined(__ANDROID__) || defined(ANDROID)

    #define O3D_ANDROID
    #define O3D_UNIX

    #if defined(__amd64__) || defined(__x86_64__)
        #define O3D_IX64
    #elif defined(__i686__) || defined(_X86_)
        #define O3D_IX32
    #elif defined(__aarch64__)
        #define O3D_ARM64
    #elif defined(__arm__)
        #defined O3D_ARM32
    #endif

    #ifdef __ARM_ARCH_6__
        #defined O3D_ARM_V6
    #elif __ARM_ARCH_7__
        #defined O3D_ARM_V7
    #endif

    #if __BYTE_ORDER == __BIG_ENDIAN
        #define O3D_BIG_ENDIAN
    #endif

    //! System API (for thread, mutex, semaphore, timers...)
    #define O3D_POSIX_SYS

//
// Windows
//
#elif defined(_MSC_VER) || defined(WIN32) || defined(__MINGW32__)

	#define O3D_WINDOWS
	#if defined(WIN32) && !defined(_WINDOWS)
		#define _WINDOWS
	#endif

    // Windows 32/64
    #ifdef _WIN64
        #define O3D_WIN64
    #elif defined(_WIN32)
        #define O3D_WIN32
    #endif

    // INTEL
    #ifdef _M_X64
        #define O3D_IX64
    #elif defined(_M_IX86) || defined(_X86_)
        #define O3D_IX32
    #endif

    // ARM
    #ifdef _M_ARM64
        #if _M_ARM == 6
            #defined O3D_ARM_V6
        #elif _M_ARM == 7
            #defined O3D_ARM_V7
        #elif _M_ARM < 6
           #error "Unsupported ARM architecture version"
        #endif
        #define O3D_ARM64
    #elif defined(_M_ARM)
        #if _M_ARM == 6
            #defined O3D_ARM_V6
        #elif _M_ARM == 7
            #defined O3D_ARM_V7
        #elif _M_ARM < 6
           #error "Unsupported ARM architecture version"
        #endif
        #define O3D_ARM32
    #endif

    #ifdef _M_IX86_FP
        #if _M_IX86_FP == 2
            #define O3D_SSE2 = 1
        #endif
    #endif

	#ifdef O3D_X11
		#error "X11 is not supported on Windows"
	#endif

    #if !defined(O3D_WIN32) && !defined(O3D_USE_SDL2)
		#define O3D_WIN32
	#endif

	//! System API (for thread, mutex, semaphore, timers...)
	#define O3D_WIN32_SYS

	//! No memory manager allocation/free/leaks detection for global memory.
	#ifdef _DEBUG
		//#define O3D_RAM_MEMORY_MANAGER
	#endif

	//! No memory manager allocation/free/leaks detection for fast allocator.

	//! Memory manager allocation/free/leaks detection for GPU memory.
	#ifdef _DEBUG
		#define O3D_GPU_MEMORY_MANAGER
	#endif

	//! Memory manager allocation/free/leaks detection for SPU memory.
	#ifdef _DEBUG
		#define O3D_SPU_MEMORY_MANAGER
	#endif

	// Disable some warnings for VC
	#ifdef _MSC_VER
		#pragma warning(disable:4100)    // delete the unreferenced parameter to resolve the warning
		#pragma warning(disable:4251)    // need DLL interface
		#pragma warning(disable:4800)    // 'int' to 'boolean'
		#pragma warning(disable:4355)    // 'this' used in base member initializer list
		#pragma warning(disable:4127)    // conditional expression is constant
		#pragma warning(disable:4201)    // nonstandard extension used : nameless struct/union
	#endif

    //! EAX sound effect support. Only available on Windows (@deprecated)
	#define O3D_BUILD_EAX

//
// UNIXes
//
#elif defined(__linux__) || defined(__unix__)

	#define O3D_UNIX

    #ifdef __linux__
		#define O3D_LINUX
	#endif

    #if !defined(O3D_X11) && !defined(O3D_USE_SDL2) && !defined(O3D_USE_WAYLAND)
		#define O3D_X11
	#endif

    #if defined(__amd64__) || defined(__x86_64__)
        #define O3D_IX64
    #elif defined(__i686__) || defined(_X86_)
        #define O3D_IX32
    #elif defined(__aarch64__)
        #define O3D_ARM64
    #elif defined(__arm__)
        #defined O3D_ARM32
    #endif

    #ifdef __ARM_ARCH_6__
        #defined O3D_ARM_V6
    #elif __ARM_ARCH_7__
        #defined O3D_ARM_V7
    #endif

	#if __BYTE_ORDER == __BIG_ENDIAN
		#define O3D_BIG_ENDIAN
	#endif

	//! System API (for thread, mutex, semaphore, timers...)
	#define O3D_POSIX_SYS

	//! No memory manager allocation/free/leaks detection for global memory.

	//! No memory manager allocation/free/leaks detection for fast allocator.

	//! Memory manager allocation/free/leaks detection for GPU memory.
	#ifdef _DEBUG
		#define O3D_GPU_MEMORY_MANAGER
	#endif

	//! Memory manager allocation/free/leaks detection for SPU memory.
	#ifdef _DEBUG
		#define O3D_SPU_MEMORY_MANAGER
	#endif
//
// MacOSX
//
#elif defined(__APPLE__) && defined(__MACH__)

	#ifndef __MACOSX__
		#define __MACOSX__
	#endif

    #define O3D_UNIX

	// support big endian for Motorola processors
	#ifdef __motorola__
		#define O3D_BIG_ENDIAN
        #define O3D_M68K
    #else
        #define O3D_IX64
    #endif

	#define O3D_MACOSX

    #if !defined(O3D_X11) || !defined (O3D_COCOA) || !defined(O3D_USE_SDL2)
        #define O3D_USE_SDL2
	#endif

	//! System API (for thread, mutex, semaphore, timers...)
	#define O3D_POSIX_SYS

	//! No memory manager allocation/free/leaks detection for global memory.

	//! No memory manager allocation/free/leaks detection for fast allocator.

	//! Memory manager allocation/free/leaks detection for GPU memory.
	#ifdef _DEBUG
		#define O3D_GPU_MEMORY_MANAGER
	#endif

	//! Memory manager allocation/free/leaks detection for SPU memory.
    #ifdef _DEBUG
		#define O3D_SPU_MEMORY_MANAGER
	#endif

#endif

// no SDL backward compatibility
#ifdef O3D_USE_SDL2
	#define SDL_NO_COMPAT
    #define O3D_SDL2
#endif

#ifdef O3D_USE_EGL
    #define O3D_EGL
#endif

#ifdef O3D_USE_WAYLAND
    #define O3D_WAYLAND
#endif

#ifdef O3D_USE_VULKAN
    #define O3D_VULKAN
#endif

//! CRT window report. Incompatibility when using timers and wnd assert reports.
//! Preferred value is 0.
#define O3D_USE_CRT_WNDREPORT 0

//! Max number of computed values in an evaluator
#define O3D_MAX_EVALUATOR_PRECISION 16

//! Numbers of loops to compute processor frequency
#define O3D_PROC_FREQ_LOOP 5000000

//! Max number of supported matrix for GPU skinning/rigging array
#define O3D_MAX_SKINNING_MATRIX_ARRAY 50

// SIMD
#ifdef O3D_USE_SSE2
    #define O3D_SSE2
#endif

// Checking...
#ifdef O3D_WINDOWS
	#ifdef O3D_POSIX_SYS
	#error "O3D_POSIX_SYS is unsupported on Windows platforms"
	#endif
#else
	#ifdef O3D_WIN32_SYS
	#error "O3D_WIN32_SYS is not supported on non Windows platforms"
	#endif
#endif

// EAX sound support only on Windows
#if defined(O3D_BUILD_EAX) && !defined(O3D_WINDOWS)
	#error "EAX is only supported on Windows"
#endif

#endif // _O3D_CONFIG_H
